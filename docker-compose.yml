services:
  rabbitmq:
    image: rabbitmq:management
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - replication-network
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 5

  replica1:
    build:
      context: .
    command: python /app/src/replica.py 1
    volumes:
      - ./replicas:/app/replicas
    networks:
      - replication-network
    depends_on:
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped

  replica2:
    build:
      context: .
    command: python /app/src/replica.py 2
    volumes:
      - ./replicas:/app/replicas
    networks:
      - replication-network
    depends_on:
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped

  replica3:
    build:
      context: .
    command: python /app/src/replica.py 3
    volumes:
      - ./replicas:/app/replicas
    networks:
      - replication-network
    depends_on:
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped

  web:
    build:
      context: .
    command: streamlit run /app/web/app.py --server.port=8501 --server.address=0.0.0.0
    volumes:
      - ./replicas:/app/replicas
    ports:
      - "8501:8501"
    networks:
      - replication-network
    depends_on:
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped

networks:
  replication-network:
    driver: bridge